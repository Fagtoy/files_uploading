worker_processes 1;

events {
  worker_connections 1024;
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
}

http {

    include mime.types;

    server {
      # if no Host match, close the connection to prevent host spoofing
      listen 80 default_server;
      return 444;
    }

    server {
      listen 81;
      server_name localhost;

      access_log /var/log/nginx/access.log;
      error_log /var/log/nginx/error.log;

      # To allow special characters in headers
      ignore_invalid_headers off;
      # Allow any size file to be uploaded.
      # Set to a value such as 1000m; to restrict file size to a specific value
      client_max_body_size 0;
      # To disable buffering
      proxy_buffering off;

      location /test {
        add_header X-HTTP-LEVEL-HEADER 1;
        add_header X-ANOTHER-HTTP-LEVEL-HEADER 1;
        add_header X-SERVER-LEVEL-HEADER 1;
        add_header X-LOCATION-LEVEL-HEADER 1;
        return 201 "OK";
      }

      location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;

        proxy_connect_timeout 300;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off;

        proxy_pass http://minio:9000;
      }
    }

    server {
      listen 80;
      server_name localhost;

      access_log /var/log/nginx/access.log;
      error_log /var/log/nginx/error.log;

      client_max_body_size 4G;
      keepalive_timeout 5;

      # path for static files
      root /etc/nginx;

      location / {
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
      }

      location /test {
        add_header X-HTTP-LEVEL-HEADER 1;
        add_header X-ANOTHER-HTTP-LEVEL-HEADER 1;
        add_header X-SERVER-LEVEL-HEADER 1;
        add_header X-LOCATION-LEVEL-HEADER 1;
        return 200 "OK";
      }

      location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://fastapi:8000;
      }

      error_page 500 502 503 504 /500.html;
      location = /500.html {
        root /path/to/app/current/public;
      }
    }
}